module.exports = {
    env: {
        node: true,
        browser: true,
        es6: true,
    },
    plugins: [
        '@typescript-eslint',
    ],
    extends: [
        'airbnb-base',
        'plugin:@typescript-eslint/recommended',
        'plugin:import/recommended',
        'plugin:jsonc/recommended-with-jsonc',
        'plugin:markdown/recommended',
    ],
    settings: {
        'import/resolver': {
            node: { extensions: ['.js', '.mjs', '.ts', '.d.ts'] },
        },
    },
    ignorePatterns: [
        'node_modules',
        '*.log',
        '*.min.*',
        '*.d.ts',
        'CHANGELOG.md',
        'dist',
        'LICENSE*',
        'output',
        'coverage',
        'public',
        'temp',
        'package-lock.json',
        'pnpm-lock.yaml',
        'yarn.lock',
        '__snapshots__',
        '!.github',
        '!.vitepress',
        '!.vscode',
    ],
    rules: {
        // import
        'import/first': 'error',
        'import/no-mutable-exports': 'error',
        'import/no-unresolved': 'off',
        'import/no-absolute-path': 'off',
        'import/prefer-default-export': 'off',
        'import/order': ['error', { alphabetize: { order: 'asc' } }],
        'import/extensions': ['error', 'always', {
            js: 'never',
            ts: 'never',
        }],
        'import/no-extraneous-dependencies': ['error', {
            devDependencies: false,
            optionalDependencies: false,
            peerDependencies: false,
            bundledDependencies: false,
        }],

        // Common
        'max-len': 'off',
        'semi': ['error', 'never'],
        'curly': ['error', 'multi-line'],
        'quotes': ['error', 'single'],
        'quote-props': ['error', 'consistent-as-needed'],
        'camelcase': 'off',
        'no-bitwise': 'off',
        'no-debugger': 'error',
        'no-plusplus': 'off',
        'no-return-await': 'off',
        'no-unused-vars': 'warn',
        'no-param-reassign': 'off',
        'no-underscore-dangle': 'off',
        'no-constant-condition': 'warn',
        'no-cond-assign': ['error', 'always'],
        'no-console': ['error', { allow: ['warn', 'error'] }],
        'no-restricted-syntax': [
            'error',
            'DebuggerStatement',
            'LabeledStatement',
            'WithStatement',
        ],
        'array-bracket-spacing': ['error', 'never'],
        'brace-style': ['error', 'stroustrup', { allowSingleLine: true }],
        'block-spacing': ['error', 'always'],
        'comma-spacing': ['error', { before: false, after: true }],
        'comma-style': ['error', 'last'],
        'comma-dangle': ['error', 'always-multiline'],
        'func-call-spacing': ['off', 'never'],
        'key-spacing': ['error', { beforeColon: false, afterColon: true }],
        'indent': ['error', 4, { SwitchCase: 1, VariableDeclarator: 1, outerIIFEBody: 1 }],
        'object-curly-spacing': ['error', 'always'],
        'linebreak-style': 'off',
        'space-before-function-paren': ['error', 'never'],

        // es6
        'no-var': 'error',
        'prefer-const': [
            'error',
            {
                destructuring: 'any',
                ignoreReadBeforeAssign: true,
            },
        ],
        'prefer-arrow-callback': [
            'error',
            {
                allowNamedFunctions: false,
                allowUnboundThis: true,
            },
        ],
        'object-shorthand': [
            'error',
            'always',
            {
                ignoreConstructors: false,
                avoidQuotes: true,
            },
        ],
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'prefer-regex-literals': 'off',
        'class-methods-use-this': 'off',
        'template-curly-spacing': 'error',
        'arrow-parens': ['error', 'as-needed', { requireForBlockBody: true }],
        'generator-star-spacing': 'off',
        'spaced-comment': ['error', 'always', {
            line: {
                markers: ['/'],
                exceptions: ['/', '#'],
            },
            block: {
                markers: ['!'],
                exceptions: ['*'],
                balanced: true,
            },
        }],

        // best-practice
        'array-callback-return': 'error',
        'block-scoped-var': 'error',
        'consistent-return': 'off',
        'complexity': ['off', 11],
        'eqeqeq': ['error', 'smart'],
        'no-alert': 'warn',
        'no-with': 'error',
        'no-void': 'error',
        'no-return-assign': 'off',
        'no-useless-escape': 'off',
        'no-multi-str': 'error',
        'no-multi-spaces': 'error',
        'no-case-declarations': 'error',
        'no-use-before-define': ['error', { functions: false, classes: false, variables: true }],
        'vars-on-top': 'error',
        'require-await': 'off',
        'operator-linebreak': ['error', 'before'],
        'eslint-comments/disable-enable-pair': 'off',
        'import/no-named-as-default-member': 'off',
        'sort-imports': [
            'error',
            {
                ignoreCase: false,
                ignoreDeclarationSort: true,
                ignoreMemberSort: false,
                memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
                allowSeparatedGroups: false,
            },
        ],

    },
    overrides: [{
        files: ['*.test.ts', '*.test.js', '*.spec.ts', '*.spec.js', '*.config.js', '*.config.ts'],
        rules: {
            'import/first': 'off',
            'import/no-extraneous-dependencies': 'off',
        },
    }, {
        files: ['*.ts'],
        rules: {
            'import/named': 'off',

            // TS
            '@typescript-eslint/semi': ['error', 'never'],
            '@typescript-eslint/ban-ts-comment': ['error', { 'ts-ignore': 'allow-with-description' }],
            '@typescript-eslint/member-delimiter-style': ['error', { multiline: { delimiter: 'none' } }],
            '@typescript-eslint/type-annotation-spacing': ['error', {}],
            '@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports', disallowTypeAnnotations: false }],
            '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
            '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
            '@typescript-eslint/prefer-ts-expect-error': 'error',

            // Override JS
            'no-useless-constructor': 'off',
            'indent': 'off',
            '@typescript-eslint/indent': ['error', 4],
            'no-unused-vars': 'off',
            '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
            'no-redeclare': 'off',
            '@typescript-eslint/no-redeclare': 'error',
            'no-use-before-define': 'off',
            '@typescript-eslint/no-use-before-define': ['error', { functions: false, classes: false, variables: true }],
            'brace-style': 'off',
            '@typescript-eslint/brace-style': ['error', 'stroustrup', { allowSingleLine: true }],
            'comma-dangle': 'off',
            '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
            'object-curly-spacing': 'off',
            '@typescript-eslint/object-curly-spacing': ['error', 'always'],

            // Off
            '@typescript-eslint/camelcase': 'off',
            '@typescript-eslint/explicit-function-return-type': 'off',
            '@typescript-eslint/explicit-member-accessibility': 'off',
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/no-parameter-properties': 'off',
            '@typescript-eslint/no-empty-interface': 'off',
            '@typescript-eslint/ban-ts-ignore': 'off',
            '@typescript-eslint/no-empty-function': 'off',
            '@typescript-eslint/no-non-null-assertion': 'off',
            '@typescript-eslint/explicit-module-boundary-types': 'off',
            '@typescript-eslint/ban-types': 'off',
            '@typescript-eslint/no-namespace': 'off',
        },
    }, {
        files: ['*.json', '*.json5'],
        parser: 'jsonc-eslint-parser',
        rules: {
            'jsonc/array-bracket-spacing': ['error', 'never'],
            'jsonc/comma-dangle': ['error', 'never'],
            'jsonc/comma-style': ['error', 'last'],
            'jsonc/indent': ['error', 2],
            'jsonc/key-spacing': ['error', { beforeColon: false, afterColon: true }],
            'jsonc/no-octal-escape': 'error',
            'jsonc/object-curly-newline': ['error', { multiline: true, consistent: true }],
            'jsonc/object-curly-spacing': ['error', 'always'],
            'jsonc/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
        },
    }, {
        files: ['package.json'],
        parser: 'jsonc-eslint-parser',
        rules: {
            'jsonc/sort-keys': [
                'error',
                {
                    pathPattern: '^$',
                    order: [
                        'publisher',
                        'name',
                        'displayName',
                        'type',
                        'version',
                        'private',
                        'packageManager',
                        'description',
                        'author',
                        'license',
                        'funding',
                        'homepage',
                        'repository',
                        'bugs',
                        'keywords',
                        'categories',
                        'sideEffects',
                        'exports',
                        'main',
                        'module',
                        'unpkg',
                        'jsdelivr',
                        'types',
                        'typesVersions',
                        'bin',
                        'icon',
                        'files',
                        'engines',
                        'activationEvents',
                        'contributes',
                        'scripts',
                        'peerDependencies',
                        'peerDependenciesMeta',
                        'dependencies',
                        'optionalDependencies',
                        'devDependencies',
                        'pnpm',
                        'overrides',
                        'resolutions',
                        'husky',
                        'simple-git-hooks',
                        'lint-staged',
                        'eslintConfig',
                    ],
                },
                {
                    pathPattern: '^(?:dev|peer|optional|bundled)?[Dd]ependencies$',
                    order: { type: 'asc' },
                },
                {
                    pathPattern: '^exports.*$',
                    order: [
                        'types',
                        'require',
                        'import',
                    ],
                },
            ],
        },
    }],
}
